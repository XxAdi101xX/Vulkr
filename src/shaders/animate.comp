#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#include "common.glsl"

layout(buffer_reference, scalar) buffer Vertices { Vertex v[]; }; // Positions of an object
layout(buffer_reference, scalar) buffer Indices { ivec3 i[]; }; // Triangle indices
layout(buffer_reference, scalar) buffer Materials {WaveFrontMaterial m[]; }; // Array of all materials on an object
layout(buffer_reference, scalar) buffer MaterialIndices {int i[]; }; // Material ID for each triangle

layout(std140, set = 0, binding = 0) buffer ObjectBuffer {
	ObjInstance objects[];
} objectBuffer;

layout(push_constant) uniform ComputePushConstant
{
	float time;
} pushConstant;

void main()
{
    ObjInstance objResource = objectBuffer.objects[2]; // Wuson is the 2nd instance, but it will alter all the of the wuson indices
    Vertices vertices = Vertices(objResource.vertices);
    Indices indices = Indices(objResource.indices);
    ivec3 ind = indices.i[gl_GlobalInvocationID.x];
    Vertex v0 = vertices.v[ind.x];

    // Compute vertex position
    const float PI       = 3.14159265;
    const float signY    = (v0.position.y >= 0 ? 1 : -1);
    const float radius   = length(v0.position.xz);
    const float argument = pushConstant.time * 4 + radius * PI;
    const float s        = sin(argument);
    v0.position.y        = signY * abs(s) * 0.5;

    // Compute normal
    if (radius == 0.0f)
    {
        v0.normal = vec3(0.0f, signY, 0.0f);
    }
    else
    {
        const float c        = cos(argument);
        const float xzFactor = -PI * s * c;
        const float yFactor  = 2.0f * signY * radius * abs(s);
        v0.normal            = normalize(vec3(v0.position.x * xzFactor, yFactor, v0.position.z * xzFactor));
    }

    vertices.v[ind.x] = v0;
}