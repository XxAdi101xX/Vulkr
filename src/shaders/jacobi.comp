/* Copyright (c) 2022 Adithya Venkatarao
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#version 460
#extension GL_EXT_debug_printf : enable

layout(constant_id = 0) const uint workGroupSize = 64;
layout(local_size_x_id = 0) in; // Maps to the constant_id = 0 specialization constant

layout(constant_id = 1) const uint fluidVelocityBufferWidth = 1;
layout(constant_id = 2) const uint fluidVelocityBufferHeight = 1;
layout(constant_id = 3) const float alpha = 0.0001f;
layout(constant_id = 4) const float reciprocalBeta = 0.25f;

// Binding 0 : Fluid velocity texture sampler
layout(set = 0, binding = 0) uniform sampler2D fluidVelocityInputTextureImage;
layout(set = 1, binding = 0, rgba32f) uniform writeonly image2D fluidVelocityOutputTextureImage; // TODO is it even correct to have this be uniform, it doesn't compile otherwise though...

vec2 inverseCanvasSize = vec2(1.0f / fluidVelocityBufferWidth, 1.0f / fluidVelocityBufferHeight); // We rely on the fact that the fluid buffer dimensions are the same as the window size

// We are iteratively solving Ax = b where x and b are both fluidVelocityInputTextureImage
void main() 
{
	const float dt = 1.0f / 60.0f;
	uint index = gl_GlobalInvocationID.x;
	if (index >= fluidVelocityBufferWidth * fluidVelocityBufferHeight) 
		return;

	ivec2 imageIndex;
	imageIndex.x = int(mod(index, fluidVelocityBufferWidth));
	imageIndex.y = int(index / fluidVelocityBufferWidth);

	vec2 scaledScreenSpaceCoords = (imageIndex + 0.5f) * inverseCanvasSize;

	float xL = texture(fluidVelocityInputTextureImage /* xTex */, scaledScreenSpaceCoords - inverseCanvasSize * vec2(1.0, 0.0)).r;
	float xR = texture(fluidVelocityInputTextureImage /* xTex */, scaledScreenSpaceCoords + inverseCanvasSize * vec2(1.0, 0.0)).r;
	float xB = texture(fluidVelocityInputTextureImage /* xTex */, scaledScreenSpaceCoords - inverseCanvasSize * vec2(0.0, 1.0)).r;
	float xT = texture(fluidVelocityInputTextureImage /* xTex */, scaledScreenSpaceCoords + inverseCanvasSize * vec2(0.0, 1.0)).r;

	float bC = texture(fluidVelocityInputTextureImage /* bTex */, scaledScreenSpaceCoords).r;

	imageStore(fluidVelocityOutputTextureImage, imageIndex, vec4((xL + xR + xB + xT + alpha * bC) * reciprocalBeta, 0.0, 0.0, 0.0));

}