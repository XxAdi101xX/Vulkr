/* Copyright (c) 2019-2020, Sascha Willems
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 the "License";
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#version 450
#extension GL_GOOGLE_include_directive : enable
#include "common.glsl"

// Binding 0 : Particle storage buffer
layout(std140, set = 0, binding = 0) buffer Particles 
{
   Particle particles[];
};

layout(push_constant) uniform ComputeParticlesPushConstant
{
	int startingIndex;
    int particleCount;
    float deltaTime;
	int blank; // alignment
} pushConstant;

layout(constant_id = 0) const uint workGroupSize = 64;
layout(constant_id = 1) const uint SHARED_DATA_SIZE = 1024;
layout(constant_id = 2) const float GRAVITY = 0.002;
layout(constant_id = 3) const float POWER = 0.75;
layout(constant_id = 4) const float SOFTEN = 0.05;

layout(local_size_x_id = 0) in;

// Share data between computer shader invocations to speed up calculations
shared vec4 sharedData[SHARED_DATA_SIZE];

void main() 
{
	float TIME_FACTOR = 0.05;
	// Current SSBO index
	uint index = gl_GlobalInvocationID.x;
	if (index >= pushConstant.particleCount) 
		return;	

	vec4 position = particles[index].position;
	vec4 velocity = particles[index].velocity;
	vec4 acceleration = vec4(0.0);

	for (uint i = 0; i < pushConstant.particleCount; i += SHARED_DATA_SIZE)
	{
		if (i + gl_LocalInvocationID.x < pushConstant.particleCount)
		{
			sharedData[gl_LocalInvocationID.x] = particles[i + gl_LocalInvocationID.x].position;
		}
		else
		{
			sharedData[gl_LocalInvocationID.x] = vec4(0.0);
		}

		barrier();

		for (int j = 0; j < gl_WorkGroupSize.x; j++)
		{
			vec4 other = sharedData[j];
			vec3 len = other.xyz - position.xyz;
			acceleration.xyz += GRAVITY * len * other.w / pow(dot(len, len) + SOFTEN, POWER);
		}

		barrier();
	}

	particles[index].velocity.xyz += pushConstant.deltaTime * TIME_FACTOR * acceleration.xyz;

	// Gradient texture position
	particles[index].velocity.w += 0.1 * TIME_FACTOR * pushConstant.deltaTime;
	if (particles[index].velocity.w > 1.0)
		particles[index].velocity.w -= 1.0;
}