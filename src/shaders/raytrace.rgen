#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_debug_printf : enable
#extension GL_GOOGLE_include_directive : enable

#include "raycommon.glsl"
#include "random.glsl"

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 1, rgba8_snorm) uniform image2D image;

layout(location = 0) rayPayloadEXT RayPayload payload;

layout(set = 1, binding = 0) uniform CameraBuffer
{
    mat4 view;
    mat4 proj;
} camera;

layout(push_constant) uniform RaytracingPushConstant
{
	vec3  lightPosition;
	float lightIntensity;
	int   lightType;
	int   frameSinceViewChange;
} pushConstant;

void main()
{
    mat4 viewInverse = inverse(camera.view);
    mat4 projInverse = inverse(camera.proj);

    uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, pushConstant.frameSinceViewChange);
    float r1 = rnd(seed);
    float r2 = rnd(seed);
    // Calculate a jitter to send a ray through a different position within the pixel for antialiasing purposes
    vec2 subpixelJitter = pushConstant.frameSinceViewChange == 0 ? vec2(0.5f, 0.5f) : vec2(r1, r2);

    //debugPrintfEXT("r1 is %f", r1);
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + subpixelJitter;
    const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2       d           = inUV * 2.0 - 1.0;

    vec4 origin    = viewInverse * vec4(0, 0, 0, 1);
    vec4 target    = projInverse * vec4(d.x, d.y, 1, 1);
    vec4 direction = viewInverse * vec4(normalize(target.xyz), 0);

    uint  rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin     = 0.001;
    float tMax     = 10000.0;

    traceRayEXT(
        topLevelAS,     // acceleration structure
        rayFlags,       // rayFlags
        0xFF,           // cullMask
        0,              // sbtRecordOffset
        0,              // sbtRecordStride
        0,              // missIndex
        origin.xyz,     // ray origin
        tMin,           // ray min range
        direction.xyz,  // ray direction
        tMax,           // ray max range
        0               // payload (location = 0)
    );

    // Linearly interpolate images from previous frame and accumulate the information onwards
    if (pushConstant.frameSinceViewChange > 0)
    {
        float a = 1.0f / float(pushConstant.frameSinceViewChange + 1);
        vec3 oldColor = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(oldColor, payload.hitValue, a), 1.0f));
    }
    else
    {
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(payload.hitValue, 1.0f));
    } 
}