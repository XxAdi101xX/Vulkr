#version 450
/* Copyright (c) 2019-2020, Sascha Willems
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 the "License";
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//#extension GL_EXT_debug_printf : enable
#extension GL_GOOGLE_include_directive : enable
#include "common.glsl"

// Binding 0 : Particle storage buffer
layout(std140, set = 0, binding = 0) buffer Particles 
{
   Particle particles[];
};
layout(std140, set = 1, binding = 0) buffer ObjectBuffer {
	ObjInstance objects[];
} objectBuffer;

layout(constant_id = 0) const uint workGroupSize = 64;
layout(local_size_x_id = 0) in;

layout(push_constant) uniform ComputeParticlesPushConstant
{
	int startingIndex;
    int particleCount;
    float deltaTime;
} pushConstant;

#define TIME_FACTOR 0.45

void main() 
{
	int index = int(gl_GlobalInvocationID);
	vec4 position = particles[index].position;
	vec4 velocity = particles[index].velocity;
	vec4 positionDelta = pushConstant.deltaTime * TIME_FACTOR * velocity;
	particles[index].position = position + positionDelta;
	//debugPrintfEXT("starting index is %d", pushConstant.startingIndex);
	//if (objectBuffer.objects[pushConstant.startingIndex + index].transform[3][0] == 0.0f)
	//debugPrintfEXT("first row: %1.2v4f", objectBuffer.objects[pushConstant.startingIndex + index].transform[3]);

	mat4 translationMatrix = mat4(1.0);
	translationMatrix[3][0] = positionDelta.x;
	translationMatrix[3][1] = positionDelta.y;
	translationMatrix[3][2] = positionDelta.z;
	objectBuffer.objects[pushConstant.startingIndex + index].transform = translationMatrix * objectBuffer.objects[pushConstant.startingIndex + index].transform;
	objectBuffer.objects[pushConstant.startingIndex + index].transformIT = transpose(inverse(objectBuffer.objects[pushConstant.startingIndex + index].transform));
}