/* Copyright (c) 2022 Adithya Venkatarao
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#version 460
#extension GL_EXT_debug_printf : enable

layout(constant_id = 0) const uint workGroupSize = 64;
layout(local_size_x_id = 0) in; // Maps to the constant_id = 0 specialization constant

layout(constant_id = 1) const uint fluidVelocityBufferWidth = 1;
layout(constant_id = 2) const uint fluidVelocityBufferHeight = 1;

layout(set = 0, binding = 0) uniform sampler2D fluidVelocityInputTextureImage;
layout(set = 1, binding = 0, rgba32f) uniform image2D fluidVelocityOutputTextureImage;

vec2 inverseCanvasSize = vec2(1.0f / fluidVelocityBufferWidth, 1.0f / fluidVelocityBufferHeight);

vec4 f4texRECTbilerp(sampler2D tex, vec2 s)
{
	vec4 st;
	st.xy = floor(s - 0.5) + 0.5;
	st.zw = st.xy + 1.0;

	vec2 t = s - st.xy;

	vec4 tex11 = texture(tex, st.xy * inverseCanvasSize);
	vec4 tex21 = texture(tex, st.zy * inverseCanvasSize);
	vec4 tex12 = texture(tex, st.xw * inverseCanvasSize);
	vec4 tex22 = texture(tex, st.zw * inverseCanvasSize);

	return mix(mix(tex11, tex21, t.x), mix(tex12, tex22, t.x), t.y);
}

void main() 
{
	uint index = gl_GlobalInvocationID.x;
	if (index >= fluidVelocityBufferWidth * fluidVelocityBufferHeight) return;

	//debugPrintfEXT("texvalue is %f %f %f", imageLoad(fluidVelocityOutputTextureImage, ivec2(0, 0)).x, imageLoad(fluidVelocityOutputTextureImage, ivec2(1, 0)).x, imageLoad(fluidVelocityOutputTextureImage, ivec2(0, 0)).z);
	ivec2 imageIndex;
	imageIndex.x = int(mod(index, fluidVelocityBufferWidth));
	imageIndex.y = int(index / fluidVelocityBufferWidth);

	const float dt = 1.0f / 60.0f;
	vec2 screenSpaceCoords = imageIndex + 0.5f;
	vec2 pos = screenSpaceCoords - dt * texture(fluidVelocityInputTextureImage, screenSpaceCoords * inverseCanvasSize).xy;
	imageStore(fluidVelocityOutputTextureImage, imageIndex, f4texRECTbilerp(fluidVelocityInputTextureImage, pos));

	//imageStore(fluidVelocityOutputTextureImage, imageIndex, imageLoad(fluidVelocityOutputTextureImage, imageIndex) + vec4(0.0, 1.0, 1.0, 0.0));

	// Note that enabling any prints causes crashes
	//debugPrintfEXT("width is %d, height is %d, index is %d, velocity for texcoord: %1.1v2f", fluidVelocityBufferWidth, fluidVelocityBufferHeight, index, texCoord);
	//debugPrintfEXT("inverse canvas size is %1.7v2f, width and height are %d, %d", inverseCanvasSize, fluidVelocityBufferWidth, fluidVelocityBufferHeight);
}